// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommandLineHelp prints the global help 1`] = `
"usage: rush [-h] [-d] [-q] <command> ...

Rush makes life easier for JavaScript developers who develop, build, and 
publish many packages from a central Git repo. It is designed to handle very 
large repositories supporting many projects and people. Rush provides 
policies, protections, and customizations that help coordinate teams and 
safely onboard new contributors. Rush also generates change logs and 
automates package publishing. It can manage decoupled subsets of projects 
with different release and versioning strategies. A full API is included to 
facilitate integration with other automation tools. If you are looking for a 
proven turnkey solution for monorepo management, Rush is for you.

Positional arguments:
  <command>
    add                 Adds one or more dependencies to the package.json and 
                        runs rush update.
    change              Records changes made to projects, indicating how the 
                        package version number should be bumped for the next 
                        publish.
    check               Checks each project's package.json files and ensures 
                        that all dependencies are of the same version 
                        throughout the repository.
    deploy              Prepares a deployment by copying a subset of Rush 
                        projects and their dependencies to a target folder
    init                Initializes a new repository to be managed by Rush
    init-autoinstaller  Initializes a new autoinstaller
    init-deploy         Creates a deployment scenario config file for use 
                        with \\"rush deploy\\".
    init-subspace       Create a new subspace.
    install             Install package dependencies for all projects in the 
                        repo according to the shrinkwrap file
    link                Create node_modules symlinks for all projects
    list                List package information for all projects in the repo
    publish             Reads and processes package publishing change 
                        requests generated by \\"rush change\\".
    purge               For diagnostic purposes, use this command to delete 
                        caches and other temporary files used by Rush
    remove              Removes one or more dependencies from the package.
                        json and runs rush update.
    scan                When migrating projects into a Rush repo, this 
                        command is helpful for detecting undeclared 
                        dependencies.
    setup               (EXPERIMENTAL) Invoke this command before working in 
                        a new repo to ensure that any required prerequisites 
                        are installed and permissions are configured.
    unlink              Delete node_modules symlinks for all projects in the 
                        repo
    update              Install package dependencies for all projects in the 
                        repo, and create or update the shrinkwrap file as 
                        needed
    install-autoinstaller
                        Install autoinstaller package dependencies
    update-autoinstaller
                        Updates autoinstaller package dependencies
    update-cloud-credentials
                        (EXPERIMENTAL) Update the credentials used by the 
                        build cache provider.
    upgrade-interactive
                        Provides interactive prompt for upgrading package 
                        dependencies per project
    version             Manage package versions in the repo.
    alert               (EXPERIMENTAL) View and manage Rush alerts for the 
                        repository
    import-strings      Imports translated strings into each project.
    upload              Uploads the built files to the server
    build               Build all projects that haven't been built, or have 
                        changed since they were last built.
    rebuild             Clean and rebuild the entire set of projects.
    tab-complete        Provides tab completion.

Optional arguments:
  -h, --help            Show this help message and exit.
  -d, --debug           Show the full call stack if an error occurs while 
                        executing the tool
  -q, --quiet           Hide rush startup information

[bold]For detailed help about a specific command, use: rush <command> -h[normal]
"
`;

exports[`CommandLineHelp prints the help for each action: add 1`] = `
"usage: rush add [-h] [-s] -p PACKAGE [--exact] [--caret] [--dev] [--peer] [-m]
                [--all] [--variant VARIANT]
                

Adds specified package(s) to the dependencies of the current project (as 
determined by the current working directory) and then runs \\"rush update\\". If 
no version is specified, a version will be automatically detected (typically 
either the latest version or a version that won't break the 
\\"ensureConsistentVersions\\" policy). If a version range (or a workspace range) 
is specified, the latest version in the range will be used. The version will 
be automatically prepended with a tilde, unless the \\"--exact\\" or \\"--caret\\" 
flags are used. The \\"--make-consistent\\" flag can be used to update all 
packages with the dependency.

Optional arguments:
  -h, --help            Show this help message and exit.
  -s, --skip-update     If specified, the \\"rush update\\" command will not be 
                        run after updating the package.json files.
  -p PACKAGE, --package PACKAGE
                        The name of the package which should be added as a 
                        dependency. A SemVer version specifier can be 
                        appended after an \\"@\\" sign. WARNING: Symbol 
                        characters are usually interpreted by your shell, so 
                        it's recommended to use quotes. For example, write 
                        \\"rush add --package \\"example@^1.2.3\\"\\" instead of 
                        \\"rush add --package example@^1.2.3\\". To add multiple 
                        packages, write \\"rush add --package foo --package 
                        bar\\".
  --exact               If specified, the SemVer specifier added to the 
                        package.json will be an exact version (e.g. without 
                        tilde or caret).
  --caret               If specified, the SemVer specifier added to the 
                        package.json will be a prepended with a \\"caret\\" 
                        specifier (\\"^\\").
  --dev                 If specified, the package will be added to the 
                        \\"devDependencies\\" section of the package.json
  --peer                If specified, the package will be added to the 
                        \\"peerDependencies\\" section of the package.json
  -m, --make-consistent
                        If specified, other packages with this dependency 
                        will have their package.json files updated to use the 
                        same version of the dependency.
  --all                 If specified, the dependency will be added to all 
                        projects.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively be 
                        specified via the RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: alert 1`] = `
"usage: rush alert [-h] [-s ALERT_ID] [--forever]

This command displays the Rush alerts for this repository. Rush alerts are 
customizable announcements and reminders that Rush prints occasionally on the 
command line. The alert definitions can be found in the rush-alerts.json 
config file.

Optional arguments:
  -h, --help            Show this help message and exit.
  -s ALERT_ID, --snooze ALERT_ID
                        Temporarily suspend the specified alert for one week
  --forever             Combined with \\"--snooze\\", causes that alert to be 
                        suspended permanently
"
`;

exports[`CommandLineHelp prints the help for each action: build 1`] = `
"usage: rush build [-h] [-p COUNT] [--timeline] [--log-cobuild-plan]
                  [-t PROJECT] [-T PROJECT] [-f PROJECT] [-o PROJECT]
                  [-i PROJECT] [-I PROJECT]
                  [--to-version-policy VERSION_POLICY_NAME]
                  [--from-version-policy VERSION_POLICY_NAME] [-v] [-c]
                  [--ignore-hooks] [-s] [-m]
                  

This command is similar to \\"rush rebuild\\", except that \\"rush build\\" performs 
an incremental build. In other words, it only builds projects whose source 
files have changed since the last successful build. The analysis requires a 
Git working tree, and only considers source files that are tracked by Git and 
whose path is under the project folder. (For more details about this 
algorithm, see the documentation for the \\"package-deps-hash\\" NPM package.) 
The incremental build state is tracked in a per-project folder called \\".
rush/temp\\" which should NOT be added to Git. The build command is tracked by 
the \\"arguments\\" field in the \\"package-deps_build.json\\" file contained 
therein; a full rebuild is forced whenever the command has changed (e.g. 
\\"--production\\" or not).

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specifies the maximum number of concurrent processes 
                        to launch during a build. The COUNT should be a 
                        positive integer, a percentage value (eg. \\"50%\\") or 
                        the word \\"max\\" to specify a count that is equal to 
                        the number of CPU cores. If this parameter is omitted,
                         then the default value depends on the operating 
                        system and number of CPU cores. This parameter may 
                        alternatively be specified via the RUSH_PARALLELISM 
                        environment variable.
  --timeline            After the build is complete, print additional 
                        statistics and CPU usage information, including an 
                        ASCII chart of the start and stop times for each 
                        operation.
  --log-cobuild-plan    (EXPERIMENTAL) Before the build starts, log 
                        information about the cobuild state. This will 
                        include information about clusters and the projects 
                        that are part of each cluster.
  -t PROJECT, --to PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to\\" parameter expands 
                        this selection to include PROJECT and all its 
                        dependencies. \\".\\" can be used as shorthand for the 
                        project in the current working directory. For details,
                         refer to the website article \\"Selecting subsets of 
                        projects\\".
  -T PROJECT, --to-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to-except\\" parameter 
                        expands this selection to include all dependencies of 
                        PROJECT, but not PROJECT itself. \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. For details, refer to the website article 
                        \\"Selecting subsets of projects\\".
  -f PROJECT, --from PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--from\\" parameter expands 
                        this selection to include PROJECT and all projects 
                        that depend on it, plus all dependencies of this set. 
                        \\".\\" can be used as shorthand for the project in the 
                        current working directory. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  -o PROJECT, --only PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--only\\" parameter expands 
                        this selection to include PROJECT; its dependencies 
                        are not added. \\".\\" can be used as shorthand for the 
                        project in the current working directory. Note that 
                        this parameter is \\"unsafe\\" as it may produce a 
                        selection that excludes some dependencies. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -i PROJECT, --impacted-by PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by\\" parameter 
                        expands this selection to include PROJECT and any 
                        projects that depend on PROJECT (and thus might be 
                        broken by changes to PROJECT). \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. Note that this parameter is \\"unsafe\\" as it 
                        may produce a selection that excludes some 
                        dependencies. For details, refer to the website 
                        article \\"Selecting subsets of projects\\".
  -I PROJECT, --impacted-by-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by-except\\" 
                        parameter works the same as \\"--impacted-by\\" except 
                        that PROJECT itself is not added to the selection. \\".
                        \\" can be used as shorthand for the project in the 
                        current working directory. Note that this parameter 
                        is \\"unsafe\\" as it may produce a selection that 
                        excludes some dependencies. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  --to-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--to-version-policy\\" 
                        parameter is equivalent to specifying \\"--to\\" for each 
                        of the projects belonging to VERSION_POLICY_NAME. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --from-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--from-version-policy\\" 
                        parameter is equivalent to specifying \\"--from\\" for 
                        each of the projects belonging to VERSION_POLICY_NAME.
                         For details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  -c, --changed-projects-only
                        Normally the incremental build logic will rebuild 
                        changed projects as well as any projects that 
                        directly or indirectly depend on a changed project. 
                        Specify \\"--changed-projects-only\\" to ignore dependent 
                        projects, only rebuilding those projects whose files 
                        were changed. Note that this parameter is \\"unsafe\\"; 
                        it is up to the developer to ensure that the ignored 
                        projects are okay to ignore.
  --ignore-hooks        Skips execution of the \\"eventHooks\\" scripts defined 
                        in rush.json. Make sure you know what you are 
                        skipping.
  -s, --ship            Perform a production build, including minification 
                        and localization steps
  -m, --minimal         Perform a fast build, which disables certain tasks 
                        such as unit tests and linting
"
`;

exports[`CommandLineHelp prints the help for each action: change 1`] = `
"usage: rush change [-h] [-v] [--no-fetch] [-b BRANCH] [--overwrite] [-c]
                   [--commit-message COMMIT_MESSAGE] [--email EMAIL] [--bulk]
                   [--message MESSAGE] [--bump-type {major,minor,patch,none}]
                   

Asks a series of questions and then generates a <branchname>-<timestamp>.json 
file in the common folder. The \`publish\` command will consume these files and 
perform the proper version bumps. Note these changes will eventually be 
published in a changelog.md file in each package. The possible types of 
changes are: MAJOR - these are breaking changes that are not backwards 
compatible. Examples are: renaming a public class, adding/removing a 
non-optional parameter from a public API, or renaming an variable or function 
that is exported. MINOR - these are changes that are backwards compatible 
(but not forwards compatible). Examples are: adding a new public API or 
adding an optional parameter to a public API PATCH - these are changes that 
are backwards and forwards compatible. Examples are: Modifying a private API 
or fixing a bug in the logic of how an existing API works. NONE - these are 
changes that are backwards and forwards compatible and don't require an 
immediate release. Examples are: Modifying dev tooling configuration like 
eslint. HOTFIX (EXPERIMENTAL) - these are changes that are hotfixes targeting 
a specific older version of the package. When a hotfix change is added, other 
changes will not be able to increment the version number. Enable this feature 
by setting 'hotfixChangeEnabled' in your rush.json.

Optional arguments:
  -h, --help            Show this help message and exit.
  -v, --verify          Verify the change file has been generated and that it 
                        is a valid JSON file
  --no-fetch            Skips fetching the baseline branch before running 
                        \\"git diff\\" to detect changes.
  -b BRANCH, --target-branch BRANCH
                        If this parameter is specified, compare the checked 
                        out branch with the specified branch to determine 
                        which projects were changed. If this parameter is not 
                        specified, the checked out branch is compared against 
                        the \\"main\\" branch.
  --overwrite           If a changefile already exists, overwrite without 
                        prompting (or erroring in --bulk mode).
  -c, --commit          If this flag is specified generated changefiles will 
                        be commited automatically.
  --commit-message COMMIT_MESSAGE
                        If this parameter is specified generated changefiles 
                        will be commited automatically with the specified 
                        commit message.
  --email EMAIL         The email address to use in changefiles. If this 
                        parameter is not provided, the email address will be 
                        detected or prompted for in interactive mode.
  --bulk                If this flag is specified, apply the same change 
                        message and bump type to all changed projects. The 
                        --message and the --bump-type parameters must be 
                        specified if the --bulk parameter is specified
  --message MESSAGE     The message to apply to all changed projects if the 
                        --bulk flag is provided.
  --bump-type {major,minor,patch,none}
                        The bump type to apply to all changed projects if the 
                        --bulk flag is provided.
"
`;

exports[`CommandLineHelp prints the help for each action: check 1`] = `
"usage: rush check [-h] [--json] [--verbose] [--subspace SUBSPACE_NAME]
                  [--variant VARIANT]
                  

Checks each project's package.json files and ensures that all dependencies 
are of the same version throughout the repository.

Optional arguments:
  -h, --help            Show this help message and exit.
  --json                If this flag is specified, output will be in JSON 
                        format.
  --verbose             If this flag is specified, long lists of package 
                        names will not be truncated. This has no effect if 
                        the --json flag is also specified.
  --subspace SUBSPACE_NAME
                        (EXPERIMENTAL) Specifies an individual Rush subspace 
                        to check, requiring versions to be consistent only 
                        within that subspace (ignoring other subspaces). This 
                        parameter is required when the \\"subspacesEnabled\\" 
                        setting is set to true in subspaces.json.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively be 
                        specified via the RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: deploy 1`] = `
"usage: rush deploy [-h] [-p PROJECT_NAME] [-s SCENARIO_NAME] [--overwrite]
                   [-t PATH] [--create-archive ARCHIVE_PATH]
                   [--create-archive-only]
                   

After building the repo, \\"rush deploy\\" can be used to prepare a deployment by 
copying a subset of Rush projects and their dependencies to a target folder, 
which can then be uploaded to a production server. The \\"rush deploy\\" behavior 
is specified by a scenario config file that must be created first, using the 
\\"rush init-deploy\\" command.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p PROJECT_NAME, --project PROJECT_NAME
                        Specifies the name of the main Rush project to be 
                        deployed. It must appear in the 
                        \\"deploymentProjectNames\\" setting in the deployment 
                        config file.
  -s SCENARIO_NAME, --scenario SCENARIO_NAME
                        By default, the deployment configuration is specified 
                        in \\"common/config/rush/deploy.json\\". You can use 
                        \\"--scenario\\" to specify an alternate name. The name 
                        must be lowercase and separated by dashes. For 
                        example, if SCENARIO_NAME is \\"web\\", then the config 
                        file would be \\"common/config/rush/deploy-web.json\\".
  --overwrite           By default, deployment will fail if the target folder 
                        is not empty. SPECIFYING THIS FLAG WILL RECURSIVELY 
                        DELETE EXISTING CONTENTS OF THE TARGET FOLDER.
  -t PATH, --target-folder PATH
                        By default, files are deployed to the \\"common/deploy\\" 
                        folder inside the Rush repo. Use this parameter to 
                        specify a different location. WARNING: USE CAUTION 
                        WHEN COMBINING WITH \\"--overwrite\\". This parameter may 
                        alternatively be specified via the 
                        RUSH_DEPLOY_TARGET_FOLDER environment variable.
  --create-archive ARCHIVE_PATH
                        If specified, after the deployment has been prepared, 
                        \\"rush deploy\\" will create an archive containing the 
                        contents of the target folder. The newly created 
                        archive file will be placed according to the 
                        designated path, relative to the target folder. 
                        Supported file extensions: .zip
  --create-archive-only
                        If specified, \\"rush deploy\\" will only create an 
                        archive containing the contents of the target folder. 
                        The target folder will not be modified other than to 
                        create the archive file.
"
`;

exports[`CommandLineHelp prints the help for each action: import-strings 1`] = `
"usage: rush import-strings [-h] [-p COUNT] [--timeline] [--log-cobuild-plan]
                           [-t PROJECT] [-T PROJECT] [-f PROJECT] [-o PROJECT]
                           [-i PROJECT] [-I PROJECT]
                           [--to-version-policy VERSION_POLICY_NAME]
                           [--from-version-policy VERSION_POLICY_NAME] [-v]
                           [--ignore-hooks]
                           [--locale {en-us,fr-fr,es-es,zh-cn}]
                           

Requests translated strings from the translation service and imports them 
into each project.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specifies the maximum number of concurrent processes 
                        to launch during a build. The COUNT should be a 
                        positive integer, a percentage value (eg. \\"50%\\") or 
                        the word \\"max\\" to specify a count that is equal to 
                        the number of CPU cores. If this parameter is omitted,
                         then the default value depends on the operating 
                        system and number of CPU cores. This parameter may 
                        alternatively be specified via the RUSH_PARALLELISM 
                        environment variable.
  --timeline            After the build is complete, print additional 
                        statistics and CPU usage information, including an 
                        ASCII chart of the start and stop times for each 
                        operation.
  --log-cobuild-plan    (EXPERIMENTAL) Before the build starts, log 
                        information about the cobuild state. This will 
                        include information about clusters and the projects 
                        that are part of each cluster.
  -t PROJECT, --to PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to\\" parameter expands 
                        this selection to include PROJECT and all its 
                        dependencies. \\".\\" can be used as shorthand for the 
                        project in the current working directory. For details,
                         refer to the website article \\"Selecting subsets of 
                        projects\\".
  -T PROJECT, --to-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to-except\\" parameter 
                        expands this selection to include all dependencies of 
                        PROJECT, but not PROJECT itself. \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. For details, refer to the website article 
                        \\"Selecting subsets of projects\\".
  -f PROJECT, --from PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--from\\" parameter expands 
                        this selection to include PROJECT and all projects 
                        that depend on it, plus all dependencies of this set. 
                        \\".\\" can be used as shorthand for the project in the 
                        current working directory. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  -o PROJECT, --only PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--only\\" parameter expands 
                        this selection to include PROJECT; its dependencies 
                        are not added. \\".\\" can be used as shorthand for the 
                        project in the current working directory. Note that 
                        this parameter is \\"unsafe\\" as it may produce a 
                        selection that excludes some dependencies. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -i PROJECT, --impacted-by PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by\\" parameter 
                        expands this selection to include PROJECT and any 
                        projects that depend on PROJECT (and thus might be 
                        broken by changes to PROJECT). \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. Note that this parameter is \\"unsafe\\" as it 
                        may produce a selection that excludes some 
                        dependencies. For details, refer to the website 
                        article \\"Selecting subsets of projects\\".
  -I PROJECT, --impacted-by-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by-except\\" 
                        parameter works the same as \\"--impacted-by\\" except 
                        that PROJECT itself is not added to the selection. \\".
                        \\" can be used as shorthand for the project in the 
                        current working directory. Note that this parameter 
                        is \\"unsafe\\" as it may produce a selection that 
                        excludes some dependencies. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  --to-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--to-version-policy\\" 
                        parameter is equivalent to specifying \\"--to\\" for each 
                        of the projects belonging to VERSION_POLICY_NAME. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --from-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--from-version-policy\\" 
                        parameter is equivalent to specifying \\"--from\\" for 
                        each of the projects belonging to VERSION_POLICY_NAME.
                         For details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  --ignore-hooks        Skips execution of the \\"eventHooks\\" scripts defined 
                        in rush.json. Make sure you know what you are 
                        skipping.
  --locale {en-us,fr-fr,es-es,zh-cn}
                        Selects a single instead of the default locale 
                        (en-us) for non-ship builds or all locales for ship 
                        builds.
"
`;

exports[`CommandLineHelp prints the help for each action: init 1`] = `
"usage: rush init [-h] [--overwrite-existing] [--rush-example-repo]
                 [--include-experiments]
                 

When invoked in an empty folder, this command provisions a standard set of 
config file templates to start managing projects using Rush.

Optional arguments:
  -h, --help            Show this help message and exit.
  --overwrite-existing  By default \\"rush init\\" will not overwrite existing 
                        config files. Specify this switch to override that. 
                        This can be useful when upgrading your repo to a 
                        newer release of Rush. WARNING: USE WITH CARE!
  --rush-example-repo   When copying the template config files, this 
                        uncomments fragments that are used by the 
                        \\"rush-example\\" GitHub repo, which is a sample 
                        monorepo that illustrates many Rush features. This 
                        option is primarily intended for maintaining that 
                        example.
  --include-experiments
                        Include features that may not be complete features, 
                        useful for demoing specific future features or 
                        current work in progress features.
"
`;

exports[`CommandLineHelp prints the help for each action: init-autoinstaller 1`] = `
"usage: rush init-autoinstaller [-h] --name AUTOINSTALLER_NAME

Use this command to initialize a new autoinstaller folder. Autoinstallers 
provide a way to manage a set of related dependencies that are used for 
scripting scenarios outside of the usual \\"rush install\\" context. See the 
command-line.json documentation for an example.

Optional arguments:
  -h, --help            Show this help message and exit.
  --name AUTOINSTALLER_NAME
                        Specifies the name of the autoinstaller folder, which 
                        must conform to the naming rules for NPM packages.
"
`;

exports[`CommandLineHelp prints the help for each action: init-deploy 1`] = `
"usage: rush init-deploy [-h] -p PROJECT_NAME [-s SCENARIO]

Use this command to initialize a new scenario config file for use with \\"rush 
deploy\\". The default filename is common/config/rush/deploy.json. However, if 
you need to manage multiple deployments with different settings, you can use 
use \\"--scenario\\" to create additional config files.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p PROJECT_NAME, --project PROJECT_NAME
                        Specifies the name of the main Rush project to be 
                        deployed in this scenario. It will be added to the 
                        \\"deploymentProjectNames\\" setting.
  -s SCENARIO, --scenario SCENARIO
                        By default, the deployment configuration will be 
                        written to \\"common/config/rush/deploy.json\\". You can 
                        use \\"--scenario\\" to specify an alternate name. The 
                        name must be lowercase and separated by dashes. For 
                        example, if the name is \\"web\\", then the config file 
                        would be \\"common/config/rush/deploy-web.json\\".
"
`;

exports[`CommandLineHelp prints the help for each action: init-subspace 1`] = `
"usage: rush init-subspace [-h] -n SUBSPACE_NAME

Use this command to create a new subspace with the default subspace 
configuration files.

Optional arguments:
  -h, --help            Show this help message and exit.
  -n SUBSPACE_NAME, --name SUBSPACE_NAME
                        The name of the subspace that is being initialized.
"
`;

exports[`CommandLineHelp prints the help for each action: install 1`] = `
"usage: rush install [-h] [-p] [--bypass-policy] [--no-link]
                    [--network-concurrency COUNT] [--debug-package-manager]
                    [--max-install-attempts NUMBER] [--ignore-hooks]
                    [--offline] [--variant VARIANT] [-t PROJECT] [-T PROJECT]
                    [-f PROJECT] [-o PROJECT] [-i PROJECT] [-I PROJECT]
                    [--to-version-policy VERSION_POLICY_NAME]
                    [--from-version-policy VERSION_POLICY_NAME]
                    [--subspace SUBSPACE_NAME] [--check-only]
                    [--resolution-only]
                    

The \\"rush install\\" command installs package dependencies for all your 
projects, based on the shrinkwrap file that is created/updated using \\"rush 
update\\". (This \\"shrinkwrap\\" file stores a central inventory of all 
dependencies and versions for projects in your repo. It is found in the 
\\"common/config/rush\\" folder.) If the shrinkwrap file is missing or outdated 
(e.g. because project package.json files have changed), \\"rush install\\" will 
fail and tell you to run \\"rush update\\" instead. This read-only nature is the 
main feature: Continuous integration builds should use \\"rush install\\" instead 
of \\"rush update\\" to catch developers who forgot to commit their shrinkwrap 
changes. Cautious people can also use \\"rush install\\" if they want to avoid 
accidentally updating their shrinkwrap file.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p, --purge           Perform \\"rush purge\\" before starting the installation
  --bypass-policy       Overrides enforcement of the \\"gitPolicy\\" rules from 
                        rush.json (use honorably!)
  --no-link             If \\"--no-link\\" is specified, then project symlinks 
                        will NOT be created after the installation completes. 
                        You will need to run \\"rush link\\" manually. This flag 
                        is useful for automated builds that want to report 
                        stages individually or perform extra operations in 
                        between the two stages. This flag is not supported 
                        when using workspaces.
  --network-concurrency COUNT
                        If specified, limits the maximum number of concurrent 
                        network requests. This is useful when troubleshooting 
                        network failures.
  --debug-package-manager
                        Activates verbose logging for the package manager. 
                        You will probably want to pipe the output of Rush to 
                        a file when using this command.
  --max-install-attempts NUMBER
                        Overrides the default maximum number of install 
                        attempts. The default value is 1.
  --ignore-hooks        Skips execution of the \\"eventHooks\\" scripts defined 
                        in rush.json. Make sure you know what you are 
                        skipping.
  --offline             Enables installation to be performed without internet 
                        access. PNPM will instead report an error if the 
                        necessary NPM packages cannot be obtained from the 
                        local cache. For details, see the documentation for 
                        PNPM's \\"--offline\\" parameter.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively be 
                        specified via the RUSH_VARIANT environment variable.
  -t PROJECT, --to PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to\\" parameter expands 
                        this selection to include PROJECT and all its 
                        dependencies. \\".\\" can be used as shorthand for the 
                        project in the current working directory. For details,
                         refer to the website article \\"Selecting subsets of 
                        projects\\".
  -T PROJECT, --to-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to-except\\" parameter 
                        expands this selection to include all dependencies of 
                        PROJECT, but not PROJECT itself. \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. For details, refer to the website article 
                        \\"Selecting subsets of projects\\".
  -f PROJECT, --from PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--from\\" parameter expands 
                        this selection to include PROJECT and all projects 
                        that depend on it, plus all dependencies of this set. 
                        \\".\\" can be used as shorthand for the project in the 
                        current working directory. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  -o PROJECT, --only PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--only\\" parameter expands 
                        this selection to include PROJECT; its dependencies 
                        are not added. \\".\\" can be used as shorthand for the 
                        project in the current working directory. Note that 
                        this parameter is \\"unsafe\\" as it may produce a 
                        selection that excludes some dependencies. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -i PROJECT, --impacted-by PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by\\" parameter 
                        expands this selection to include PROJECT and any 
                        projects that depend on PROJECT (and thus might be 
                        broken by changes to PROJECT). \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. Note that this parameter is \\"unsafe\\" as it 
                        may produce a selection that excludes some 
                        dependencies. For details, refer to the website 
                        article \\"Selecting subsets of projects\\".
  -I PROJECT, --impacted-by-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by-except\\" 
                        parameter works the same as \\"--impacted-by\\" except 
                        that PROJECT itself is not added to the selection. \\".
                        \\" can be used as shorthand for the project in the 
                        current working directory. Note that this parameter 
                        is \\"unsafe\\" as it may produce a selection that 
                        excludes some dependencies. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  --to-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--to-version-policy\\" 
                        parameter is equivalent to specifying \\"--to\\" for each 
                        of the projects belonging to VERSION_POLICY_NAME. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --from-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--from-version-policy\\" 
                        parameter is equivalent to specifying \\"--from\\" for 
                        each of the projects belonging to VERSION_POLICY_NAME.
                         For details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --subspace SUBSPACE_NAME
                        (EXPERIMENTAL) Specifies a Rush subspace to be 
                        installed. Requires the \\"subspacesEnabled\\" feature to 
                        be enabled in subspaces.json.
  --check-only          Only check the validity of the shrinkwrap file 
                        without performing an install.
  --resolution-only     Only perform dependency resolution, useful for 
                        ensuring peer dependendencies are up to date. Note 
                        that this flag is only supported when using the pnpm 
                        package manager.
"
`;

exports[`CommandLineHelp prints the help for each action: install-autoinstaller 1`] = `
"usage: rush install-autoinstaller [-h] --name AUTOINSTALLER_NAME

Use this command to install dependencies for an autoinstaller folder.

Optional arguments:
  -h, --help            Show this help message and exit.
  --name AUTOINSTALLER_NAME
                        The name of the autoinstaller, which must be one of 
                        the folders under common/autoinstallers.
"
`;

exports[`CommandLineHelp prints the help for each action: link 1`] = `
"usage: rush link [-h] [-f]

Create node_modules symlinks for all projects. This operation is normally 
performed automatically as part of \\"rush install\\" or \\"rush update\\". You 
should only need to use \\"rush link\\" if you performed \\"rush unlink\\" for some 
reason, or if you specified the \\"--no-link\\" option for \\"rush install\\" or 
\\"rush update\\".

Optional arguments:
  -h, --help   Show this help message and exit.
  -f, --force  Deletes and recreates all links, even if the filesystem state 
               seems to indicate that this is unnecessary.
"
`;

exports[`CommandLineHelp prints the help for each action: list 1`] = `
"usage: rush list [-h] [-v] [-p] [--full-path] [--detailed] [--json]
                 [-t PROJECT] [-T PROJECT] [-f PROJECT] [-o PROJECT]
                 [-i PROJECT] [-I PROJECT]
                 [--to-version-policy VERSION_POLICY_NAME]
                 [--from-version-policy VERSION_POLICY_NAME]
                 

List package names, and optionally version (--version) and path (--path) or 
full path (--full-path), for projects in the current rush config.

Optional arguments:
  -h, --help            Show this help message and exit.
  -v, --version         If this flag is specified, the project version will 
                        be displayed in a column along with the package name.
  -p, --path            If this flag is specified, the project path will be 
                        displayed in a column along with the package name.
  --full-path           If this flag is specified, the project full path will 
                        be displayed in a column along with the package name.
  --detailed            For the non --json view, if this flag is specified, 
                        include path (-p), version (-v) columns along with 
                        the project's applicable: versionPolicy, 
                        versionPolicyName, shouldPublish, reviewPolicy, and 
                        tags fields.
  --json                If this flag is specified, output will be in JSON 
                        format.
  -t PROJECT, --to PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to\\" parameter expands 
                        this selection to include PROJECT and all its 
                        dependencies. \\".\\" can be used as shorthand for the 
                        project in the current working directory. For details,
                         refer to the website article \\"Selecting subsets of 
                        projects\\".
  -T PROJECT, --to-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to-except\\" parameter 
                        expands this selection to include all dependencies of 
                        PROJECT, but not PROJECT itself. \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. For details, refer to the website article 
                        \\"Selecting subsets of projects\\".
  -f PROJECT, --from PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--from\\" parameter expands 
                        this selection to include PROJECT and all projects 
                        that depend on it, plus all dependencies of this set. 
                        \\".\\" can be used as shorthand for the project in the 
                        current working directory. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  -o PROJECT, --only PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--only\\" parameter expands 
                        this selection to include PROJECT; its dependencies 
                        are not added. \\".\\" can be used as shorthand for the 
                        project in the current working directory. Note that 
                        this parameter is \\"unsafe\\" as it may produce a 
                        selection that excludes some dependencies. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -i PROJECT, --impacted-by PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by\\" parameter 
                        expands this selection to include PROJECT and any 
                        projects that depend on PROJECT (and thus might be 
                        broken by changes to PROJECT). \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. Note that this parameter is \\"unsafe\\" as it 
                        may produce a selection that excludes some 
                        dependencies. For details, refer to the website 
                        article \\"Selecting subsets of projects\\".
  -I PROJECT, --impacted-by-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by-except\\" 
                        parameter works the same as \\"--impacted-by\\" except 
                        that PROJECT itself is not added to the selection. \\".
                        \\" can be used as shorthand for the project in the 
                        current working directory. Note that this parameter 
                        is \\"unsafe\\" as it may produce a selection that 
                        excludes some dependencies. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  --to-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--to-version-policy\\" 
                        parameter is equivalent to specifying \\"--to\\" for each 
                        of the projects belonging to VERSION_POLICY_NAME. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --from-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--from-version-policy\\" 
                        parameter is equivalent to specifying \\"--from\\" for 
                        each of the projects belonging to VERSION_POLICY_NAME.
                         For details, refer to the website article \\"Selecting 
                        subsets of projects\\".
"
`;

exports[`CommandLineHelp prints the help for each action: publish 1`] = `
"usage: rush publish [-h] [-a] [-b BRANCH] [-p] [--add-commit-details]
                    [--regenerate-changelogs] [-r REGISTRY] [-n TOKEN]
                    [-t TAG] [--set-access-level {public,restricted}] [--pack]
                    [--release-folder FOLDER] [--include-all]
                    [--version-policy POLICY] [--prerelease-name NAME]
                    [--partial-prerelease] [--suffix SUFFIX] [--force]
                    [--apply-git-tags-on-pack] [-c COMMIT_ID]
                    [--ignore-git-hooks]
                    

Reads and processes package publishing change requests generated by \\"rush 
change\\". This will perform a read-only operation by default, printing 
operations executed to the console. To commit changes and publish packages, 
you must use the --commit flag and/or the --publish flag.

Optional arguments:
  -h, --help            Show this help message and exit.
  -a, --apply           If this flag is specified, the change requests will 
                        be applied to package.json files.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, applied changes and 
                        deleted change requests will be committed and merged 
                        into the target branch.
  -p, --publish         If this flag is specified, applied changes will be 
                        published to the NPM registry.
  --add-commit-details  Adds commit author and hash to the changelog.json 
                        files for each change.
  --regenerate-changelogs
                        Regenerates all changelog files based on the current 
                        JSON content.
  -r REGISTRY, --registry REGISTRY
                        Publishes to a specified NPM registry. If this is 
                        specified, it will prevent the current commit will 
                        not be tagged.
  -n TOKEN, --npm-auth-token TOKEN
                        (DEPRECATED) Specifies the authentication token to 
                        use during publishing. This parameter is deprecated 
                        because command line parameters may be readable by 
                        unrelated processes on a lab machine. Instead, a 
                        safer practice is to pass the token via an 
                        environment variable and reference it from your 
                        common/config/rush/.npmrc-publish file.
  -t TAG, --tag TAG     The tag option to pass to npm publish. By default NPM 
                        will publish using the 'latest' tag, even if the 
                        package is older than the current latest, so in 
                        publishing workflows for older releases, providing a 
                        tag is important. When hotfix changes are made, this 
                        parameter defaults to 'hotfix'.
  --set-access-level {public,restricted}
                        By default, when Rush invokes \\"npm publish\\" it will 
                        publish scoped packages with an access level of 
                        \\"restricted\\". Scoped packages can be published with 
                        an access level of \\"public\\" by specifying that value 
                        for this flag with the initial publication. NPM 
                        always publishes unscoped packages with an access 
                        level of \\"public\\". For more information, see the NPM 
                        documentation for the \\"--access\\" option of \\"npm 
                        publish\\".
  --pack                Packs projects into tarballs instead of publishing to 
                        npm repository. It can only be used when 
                        --include-all is specified. If this flag is specified,
                         NPM registry related parameters will be ignored.
  --release-folder FOLDER
                        This parameter is used with --pack parameter to 
                        provide customized location for the tarballs instead 
                        of the default value.
  --include-all         If this flag is specified, all packages with 
                        shouldPublish=true in rush.json or with a specified 
                        version policy will be published if their version is 
                        newer than published version.
  --version-policy POLICY
                        Version policy name. Only projects with this version 
                        policy will be published if used with --include-all.
  --prerelease-name NAME
                        Bump up to a prerelease version with the provided 
                        prerelease name. Cannot be used with --suffix
  --partial-prerelease  Used with --prerelease-name. Only bump packages to a 
                        prerelease version if they have changes.
  --suffix SUFFIX       Append a suffix to all changed versions. Cannot be 
                        used with --prerelease-name.
  --force               If this flag is specified with --publish, packages 
                        will be published with --force on npm
  --apply-git-tags-on-pack
                        If specified with --publish and --pack, git tags will 
                        be applied for packages as if a publish was being run 
                        without --pack.
  -c COMMIT_ID, --commit COMMIT_ID
                        Used in conjunction with git tagging -- apply git 
                        tags at the commit hash specified. If not provided, 
                        the current HEAD will be tagged.
  --ignore-git-hooks    Skips execution of all git hooks. Make sure you know 
                        what you are skipping.
"
`;

exports[`CommandLineHelp prints the help for each action: purge 1`] = `
"usage: rush purge [-h] [--unsafe]

The \\"rush purge\\" command is used to delete temporary files created by Rush. 
This is useful if you are having problems and suspect that cache files may be 
corrupt.

Optional arguments:
  -h, --help  Show this help message and exit.
  --unsafe    (UNSAFE!) Also delete shared files such as the package manager 
              instances stored in the \\".rush\\" folder in the user's home 
              directory. This is a more aggressive fix that is NOT SAFE to 
              run in a live environment because it will cause other 
              concurrent Rush processes to fail.
"
`;

exports[`CommandLineHelp prints the help for each action: rebuild 1`] = `
"usage: rush rebuild [-h] [-p COUNT] [--timeline] [--log-cobuild-plan]
                    [-t PROJECT] [-T PROJECT] [-f PROJECT] [-o PROJECT]
                    [-i PROJECT] [-I PROJECT]
                    [--to-version-policy VERSION_POLICY_NAME]
                    [--from-version-policy VERSION_POLICY_NAME] [-v]
                    [--ignore-hooks] [-s] [-m]
                    

This command assumes that the package.json file for each project contains a 
\\"scripts\\" entry for \\"npm run build\\" that performs a full clean build. Rush 
invokes this script to build each project that is registered in rush.json. 
Projects are built in parallel where possible, but always respecting the 
dependency graph for locally linked projects. The number of simultaneous 
processes will be based on the number of machine cores unless overridden by 
the --parallelism flag. (For an incremental build, see \\"rush build\\" instead 
of \\"rush rebuild\\".)

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specifies the maximum number of concurrent processes 
                        to launch during a build. The COUNT should be a 
                        positive integer, a percentage value (eg. \\"50%\\") or 
                        the word \\"max\\" to specify a count that is equal to 
                        the number of CPU cores. If this parameter is omitted,
                         then the default value depends on the operating 
                        system and number of CPU cores. This parameter may 
                        alternatively be specified via the RUSH_PARALLELISM 
                        environment variable.
  --timeline            After the build is complete, print additional 
                        statistics and CPU usage information, including an 
                        ASCII chart of the start and stop times for each 
                        operation.
  --log-cobuild-plan    (EXPERIMENTAL) Before the build starts, log 
                        information about the cobuild state. This will 
                        include information about clusters and the projects 
                        that are part of each cluster.
  -t PROJECT, --to PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to\\" parameter expands 
                        this selection to include PROJECT and all its 
                        dependencies. \\".\\" can be used as shorthand for the 
                        project in the current working directory. For details,
                         refer to the website article \\"Selecting subsets of 
                        projects\\".
  -T PROJECT, --to-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--to-except\\" parameter 
                        expands this selection to include all dependencies of 
                        PROJECT, but not PROJECT itself. \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. For details, refer to the website article 
                        \\"Selecting subsets of projects\\".
  -f PROJECT, --from PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--from\\" parameter expands 
                        this selection to include PROJECT and all projects 
                        that depend on it, plus all dependencies of this set. 
                        \\".\\" can be used as shorthand for the project in the 
                        current working directory. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  -o PROJECT, --only PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--only\\" parameter expands 
                        this selection to include PROJECT; its dependencies 
                        are not added. \\".\\" can be used as shorthand for the 
                        project in the current working directory. Note that 
                        this parameter is \\"unsafe\\" as it may produce a 
                        selection that excludes some dependencies. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -i PROJECT, --impacted-by PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by\\" parameter 
                        expands this selection to include PROJECT and any 
                        projects that depend on PROJECT (and thus might be 
                        broken by changes to PROJECT). \\".\\" can be used as 
                        shorthand for the project in the current working 
                        directory. Note that this parameter is \\"unsafe\\" as it 
                        may produce a selection that excludes some 
                        dependencies. For details, refer to the website 
                        article \\"Selecting subsets of projects\\".
  -I PROJECT, --impacted-by-except PROJECT
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. Each \\"--impacted-by-except\\" 
                        parameter works the same as \\"--impacted-by\\" except 
                        that PROJECT itself is not added to the selection. \\".
                        \\" can be used as shorthand for the project in the 
                        current working directory. Note that this parameter 
                        is \\"unsafe\\" as it may produce a selection that 
                        excludes some dependencies. For details, refer to the 
                        website article \\"Selecting subsets of projects\\".
  --to-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--to-version-policy\\" 
                        parameter is equivalent to specifying \\"--to\\" for each 
                        of the projects belonging to VERSION_POLICY_NAME. For 
                        details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  --from-version-policy VERSION_POLICY_NAME
                        Normally all projects in the monorepo will be 
                        processed; adding this parameter will instead select 
                        a subset of projects. The \\"--from-version-policy\\" 
                        parameter is equivalent to specifying \\"--from\\" for 
                        each of the projects belonging to VERSION_POLICY_NAME.
                         For details, refer to the website article \\"Selecting 
                        subsets of projects\\".
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  --ignore-hooks        Skips execution of the \\"eventHooks\\" scripts defined 
                        in rush.json. Make sure you know what you are 
                        skipping.
  -s, --ship            Perform a production build, including minification 
                        and localization steps
  -m, --minimal         Perform a fast build, which disables certain tasks 
                        such as unit tests and linting
"
`;

exports[`CommandLineHelp prints the help for each action: remove 1`] = `
"usage: rush remove [-h] [-s] -p PACKAGE [--all] [--variant VARIANT]

Removes specified package(s) from the dependencies of the current project (as 
determined by the current working directory) and then runs \\"rush update\\".

Optional arguments:
  -h, --help            Show this help message and exit.
  -s, --skip-update     If specified, the \\"rush update\\" command will not be 
                        run after updating the package.json files.
  -p PACKAGE, --package PACKAGE
                        The name of the package which should be removed. To 
                        remove multiple packages, run \\"rush remove --package 
                        foo --package bar\\".
  --all                 If specified, the dependency will be removed from all 
                        projects that declare it.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively be 
                        specified via the RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: scan 1`] = `
"usage: rush scan [-h] [--json] [--all]

The Node.js module system allows a project to import NPM packages without 
explicitly declaring them as dependencies in the package.json file. Such 
\\"phantom dependencies\\" can cause problems. Rush and PNPM use symlinks 
specifically to protect against phantom dependencies. These protections may 
cause runtime errors for existing projects when they are first migrated into 
a Rush monorepo. The \\"rush scan\\" command is a handy tool for fixing these 
errors. It scans the \\"./src\\" and \\"./lib\\" folders for import syntaxes such as 
\\"import __ from '__'\\", \\"require('__')\\", and \\"System.import('__'). It prints a 
report of the referenced packages. This heuristic is not perfect, but it can 
save a lot of time when migrating projects.

Optional arguments:
  -h, --help  Show this help message and exit.
  --json      If this flag is specified, output will be in JSON format.
  --all       If this flag is specified, output will list all detected 
              dependencies.
"
`;

exports[`CommandLineHelp prints the help for each action: setup 1`] = `
"usage: rush setup [-h]

(EXPERIMENTAL) Invoke this command before working in a new repo to ensure 
that any required prerequisites are installed and permissions are configured. 
The initial implementation configures the NPM registry credentials. More 
features will be added later.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for each action: tab-complete 1`] = `
"usage: rush tab-complete [-h] [--word WORD] [--position INDEX]

Provides tab completion.

Optional arguments:
  -h, --help        Show this help message and exit.
  --word WORD       The word to complete. The default value is \\"\\".
  --position INDEX  The position in the word to be completed. The default 
                    value is 0.
"
`;

exports[`CommandLineHelp prints the help for each action: unlink 1`] = `
"usage: rush unlink [-h]

This removes the symlinks created by the \\"rush link\\" command. This is useful 
for cleaning a repo using \\"git clean\\" without accidentally deleting source 
files, or for using standard NPM commands on a project.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for each action: update 1`] = `
"usage: rush update [-h] [-p] [--bypass-policy] [--no-link]
                   [--network-concurrency COUNT] [--debug-package-manager]
                   [--max-install-attempts NUMBER] [--ignore-hooks]
                   [--offline] [--variant VARIANT] [--full] [--recheck]
                   

The \\"rush update\\" command installs the dependencies described in your package.
json files, and updates the shrinkwrap file as needed. (This \\"shrinkwrap\\" 
file stores a central inventory of all dependencies and versions for projects 
in your repo. It is found in the \\"common/config/rush\\" folder.) Note that Rush 
always performs a single install for all projects in your repo. You should 
run \\"rush update\\" whenever you start working in a Rush repo, after you pull 
from Git, and after you modify a package.json file. If there is nothing to do,
 \\"rush update\\" is instantaneous. NOTE: In certain cases \\"rush install\\" should 
be used instead of \\"rush update\\" -- for details, see the command help for 
\\"rush install\\".

Optional arguments:
  -h, --help            Show this help message and exit.
  -p, --purge           Perform \\"rush purge\\" before starting the installation
  --bypass-policy       Overrides enforcement of the \\"gitPolicy\\" rules from 
                        rush.json (use honorably!)
  --no-link             If \\"--no-link\\" is specified, then project symlinks 
                        will NOT be created after the installation completes. 
                        You will need to run \\"rush link\\" manually. This flag 
                        is useful for automated builds that want to report 
                        stages individually or perform extra operations in 
                        between the two stages. This flag is not supported 
                        when using workspaces.
  --network-concurrency COUNT
                        If specified, limits the maximum number of concurrent 
                        network requests. This is useful when troubleshooting 
                        network failures.
  --debug-package-manager
                        Activates verbose logging for the package manager. 
                        You will probably want to pipe the output of Rush to 
                        a file when using this command.
  --max-install-attempts NUMBER
                        Overrides the default maximum number of install 
                        attempts. The default value is 1.
  --ignore-hooks        Skips execution of the \\"eventHooks\\" scripts defined 
                        in rush.json. Make sure you know what you are 
                        skipping.
  --offline             Enables installation to be performed without internet 
                        access. PNPM will instead report an error if the 
                        necessary NPM packages cannot be obtained from the 
                        local cache. For details, see the documentation for 
                        PNPM's \\"--offline\\" parameter.
  --variant VARIANT     Run command using a variant installation 
                        configuration. This parameter may alternatively be 
                        specified via the RUSH_VARIANT environment variable.
  --full                Normally \\"rush update\\" tries to preserve your 
                        existing installed versions and only makes the 
                        minimum updates needed to satisfy the package.json 
                        files. This conservative approach prevents your PR 
                        from getting involved with package updates that are 
                        unrelated to your work. Use \\"--full\\" when you really 
                        want to update all dependencies to the latest 
                        SemVer-compatible version. This should be done 
                        periodically by a person or robot whose role is to 
                        deal with potential upgrade regressions.
  --recheck             If the shrinkwrap file appears to already satisfy the 
                        package.json files, then \\"rush update\\" will skip 
                        invoking the package manager at all. In certain 
                        situations this heuristic may be inaccurate. Use the 
                        \\"--recheck\\" flag to force the package manager to 
                        process the shrinkwrap file. This will also update 
                        your shrinkwrap file with Rush's fixups. (To minimize 
                        shrinkwrap churn, these fixups are normally performed 
                        only in the temporary folder.)
"
`;

exports[`CommandLineHelp prints the help for each action: update-autoinstaller 1`] = `
"usage: rush update-autoinstaller [-h] --name AUTOINSTALLER_NAME

Use this command to regenerate the shrinkwrap file for an autoinstaller 
folder.

Optional arguments:
  -h, --help            Show this help message and exit.
  --name AUTOINSTALLER_NAME
                        The name of the autoinstaller, which must be one of 
                        the folders under common/autoinstallers.
"
`;

exports[`CommandLineHelp prints the help for each action: update-cloud-credentials 1`] = `
"usage: rush update-cloud-credentials [-h] [-i]
                                     [--credential CREDENTIAL_STRING] [-d]
                                     

(EXPERIMENTAL) If the build caching feature is configured, this command 
facilitates updating the credentials used by a cloud-based provider.

Optional arguments:
  -h, --help            Show this help message and exit.
  -i, --interactive     Run the credential update operation in interactive 
                        mode, if supported by the provider.
  --credential CREDENTIAL_STRING
                        A static credential, to be cached.
  -d, --delete          If specified, delete stored credentials.
"
`;

exports[`CommandLineHelp prints the help for each action: upgrade-interactive 1`] = `
"usage: rush upgrade-interactive [-h] [--make-consistent] [-s]
                                [--variant VARIANT]
                                

Provide an interactive way to upgrade your dependencies. Running the command 
will open an interactive prompt that will ask you which projects and which 
dependencies you would like to upgrade. It will then update your package.json 
files, and run \\"rush update\\" for you. If you are using 
ensureConsistentVersions policy, upgrade-interactive will update all packages 
which use the dependencies that you are upgrading and match their SemVer 
range if provided. If ensureConsistentVersions is not enabled, 
upgrade-interactive will only update the dependency in the package you 
specify. This can be overriden by using the --make-consistent flag.

Optional arguments:
  -h, --help         Show this help message and exit.
  --make-consistent  When upgrading dependencies from a single project, also 
                     upgrade dependencies from other projects.
  -s, --skip-update  If specified, the \\"rush update\\" command will not be run 
                     after updating the package.json files.
  --variant VARIANT  Run command using a variant installation configuration. 
                     This parameter may alternatively be specified via the 
                     RUSH_VARIANT environment variable.
"
`;

exports[`CommandLineHelp prints the help for each action: upload 1`] = `
"usage: rush upload [-h] [--locale {en-us,fr-fr,es-es,zh-cn}]

Uploads all the built assets to the CDN

Optional arguments:
  -h, --help            Show this help message and exit.
  --locale {en-us,fr-fr,es-es,zh-cn}
                        Selects a single instead of the default locale 
                        (en-us) for non-ship builds or all locales for ship 
                        builds.
"
`;

exports[`CommandLineHelp prints the help for each action: version 1`] = `
"usage: rush version [-h] [-b BRANCH] [--ensure-version-policy]
                    [--override-version NEW_VERSION] [--bump]
                    [--bypass-policy] [--version-policy POLICY]
                    [--override-bump BUMPTYPE] [--override-prerelease-id ID]
                    [--ignore-git-hooks]
                    

use this \\"rush version\\" command to ensure version policies and bump versions.

Optional arguments:
  -h, --help            Show this help message and exit.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, changes will be committed 
                        and merged into the target branch.
  --ensure-version-policy
                        Updates package versions if needed to satisfy version 
                        policies.
  --override-version NEW_VERSION
                        Override the version in the specified 
                        --version-policy. This setting only works for 
                        lock-step version policy and when 
                        --ensure-version-policy is specified.
  --bump                Bumps package version based on version policies.
  --bypass-policy       Overrides \\"gitPolicy\\" enforcement (use honorably!)
  --version-policy POLICY
                        The name of the version policy
  --override-bump BUMPTYPE
                        Overrides the bump type in the version-policy.json 
                        for the specified version policy. Valid BUMPTYPE 
                        values include: prerelease, prepatch, patch, preminor,
                         minor, premajor and major. This setting only works 
                        for lock-step version policy in bump action.
  --override-prerelease-id ID
                        Overrides the prerelease identifier in the version 
                        value of version-policy.json for the specified 
                        version policy. This setting only works for lock-step 
                        version policy. This setting increases to new 
                        prerelease id when \\"--bump\\" is provided but only 
                        replaces the prerelease name when 
                        \\"--ensure-version-policy\\" is provided.
  --ignore-git-hooks    Skips execution of all git hooks. Make sure you know 
                        what you are skipping.
"
`;
