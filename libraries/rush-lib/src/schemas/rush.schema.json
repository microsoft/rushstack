{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Rush main config File",
  "description": "The main configuration file for the Rush multi-project build tool. See http://rushjs.io for details.",
  "type": "object",

  "definitions": {
    "environmentVariables": {
      "description": "Environment variables for the package manager",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "override": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  },

  "properties": {
    "$schema": {
      "description": "Part of the JSON Schema standard, this optional keyword declares the URL of the schema that the file conforms to. Editors may download the schema and use it to perform syntax highlighting.",
      "type": "string"
    },

    "npmVersion": {
      "description": "If specified, selects NPM as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "pnpmVersion": {
      "description": "If specified, selects PNPM as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "yarnVersion": {
      "description": "If specified, selects Yarn as the package manager and specifies the deterministic version to be installed by Rush.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },

    "rushVersion": {
      "description": "The version of the Rush tool that will be used to build this repository.",
      "type": "string",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9a-zA-Z.+\\-]+$"
    },
    "nodeSupportedVersionRange": {
      "description": "A node-semver expression (e.g. \">=1.2.3 <2.0.0\", see https://github.com/npm/node-semver) indicating which versions of Node.js can safely be used to build this repository.  If omitted, no validation is performed.",
      "type": "string"
    },
    "nodeSupportedVersionInstructions": {
      "description": "If specified, when a rush command fails due to an unsupported node version, this additional instructional message is printed below the failure message.",
      "type": "string"
    },
    "suppressNodeLtsWarning": {
      "description": "Rush normally prints a warning if it detects a pre-LTS Node.js version. If you are testing pre-LTS versions in preparation for supporting the first LTS version, you can use this setting to disable Rush's warning.",
      "type": "boolean"
    },
    "suppressRushIsPublicVersionCheck": {
      "description": "Rush normally prints a warning if it detects that the current version is not one published to the public npmjs.org registry. If you need to block calls to the npm registry, you can use this setting to disable Rush's check.",
      "type": "boolean"
    },
    "projectFolderMinDepth": {
      "description": "The minimum folder depth for the projectFolder field.  The default value is 1, i.e. no slashes in the path name.",
      "type": "number"
    },
    "ensureConsistentVersions": {
      "description": "If true, consistent version specifiers for dependencies will be enforced (i.e. \"rush check\" is run before some commands). Used when property is not defined in common-versions.json.",
      "type": "boolean"
    },
    "hotfixChangeEnabled": {
      "description": "Allows creation of hotfix changes. This feature is experimental so it is disabled by default. If this is set, \"rush change\" only allows a \"hotfix\" change type to be specified. This change type will be used when publishing subsequent changes from the monorepo.",
      "type": "boolean"
    },
    "npmOptions": {
      "description": "Options that are only used when the NPM package manager is selected.",
      "type": "object",
      "properties": {
        "environmentVariables": {
          "$ref": "#/definitions/environmentVariables"
        }
      },
      "additionalProperties": false
    },
    "pnpmOptions": {
      "description": "Options that are only used when the PNPM pacakge manager is selected.",
      "type": "object",
      "properties": {
        "pnpmStore": {
          "description": "Specifies the location of the PNPM store.  There are two possible values:\n\n\"local\" - use the \"pnpm-store\" folder in the current configured temp folder: \"common/temp/pnpm-store\" by default.\n\"global\" - use PNPM's global store, which has the benefit of being shared across multiple repo folders, but the disadvantage of less isolation for builds (e.g. bugs or incompatibilities when two repos use different releases of PNPM)\n\nIn all cases, the store path and the virtual store path will be overridden by the environment variables RUSH_PNPM_STORE_PATH and RUSH_PNPM_VIRTUAL_STORE_PATH, respectively.\n\nThe default value is \"local\".",
          "type": "string",
          "enum": ["local", "global"]
        },
        "strictPeerDependencies": {
          "description": "If true, then the installation will fail if there is a missing or invalid peer dependency in the tree, which is an invalid state that can cause build failures or incompatible dependency versions. (For historical reasons, JavaScript package managers generally do not treat this invalid state as an error.) This is done via the \"--strict-peer-dependencies\" flag in PNPM version < 7.0.0 and via the \"--no-strict-peer-dependencies\" flag in PNPM >= 7.0.0. The default value is false.",
          "type": "boolean"
        },
        "resolutionStrategy": {
          "description": "(Deprecated) Configures the strategy used to select versions during installation.  This feature requires PNPM version 3.1 or newer.  It corresponds to the \"--resolution-strategy\" command-line option for PNPM.  Possible values are \"fast\" and \"fewer-dependencies\".  PNPM's default is \"fast\", but this may be incompatible with certain packages, for example the \"@types\" packages from DefinitelyTyped.  Rush's default is \"fewer-dependencies\", which causes PNPM to avoid installing a newer version if an already installed version can be reused; this is more similar to NPM's algorithm.",
          "type": "string",
          "enum": ["fewer-dependencies", "fast"]
        },
        "environmentVariables": {
          "$ref": "#/definitions/environmentVariables"
        },
        "preventManualShrinkwrapChanges": {
          "description": "If true, then \"rush install\" will report an error if manual modifications were made to the PNPM shrinkwrap file without running `rush update` afterwards. To temporarily disable this validation when invoking \"rush install\", use the \"--bypassPolicy\" command-line parameter. The default value is false.",
          "type": "boolean"
        },
        "useWorkspaces": {
          "description": "If true, then Rush will use the workspaces feature to install and link packages when invoking PNPM. The default value is false.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "yarnOptions": {
      "description": "Options that are only used when the Yarn pacakge manager is selected.",
      "type": "object",
      "properties": {
        "ignoreEngines": {
          "description": "If true, then Rush will add the \"--ignore-engines\" option when invoking Yarn. * This allows \"rush install\" to succeed if there are dependencies with engines defined in package.json which do not match the current environment. The default value is false.",
          "type": "boolean"
        },
        "environmentVariables": {
          "$ref": "#/definitions/environmentVariables"
        }
      },
      "additionalProperties": false
    },
    "projectFolderMaxDepth": {
      "description": "The maximum folder depth for the projectFolder field.  The default value is 2, i.e. a single slash in the path name.",
      "type": "number"
    },
    "allowMostlyStandardPackageNames": {
      "description": "Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early days there was no standard and hardly any enforcement.  A few large legacy projects are still using nonstandard package names, and private registries sometimes allow it.  Set \"allowMostlyStandardPackageNames\" to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax the rules too much it is likely to cause very confusing malfunctions. The default value is false.",
      "type": "boolean"
    },
    "approvedPackagesPolicy": {
      "description": "Controls a package review workflow driven by the two config files \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\"",
      "type": "object",
      "properties": {
        "reviewCategories": {
          "description": "A list of category names that can be applied to each project, and then referenced in \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredNpmScopes": {
          "description": "A list of NPM package scopes that will be excluded from review (e.g. \"@types\")",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^@"
          }
        }
      },
      "additionalProperties": false
    },
    "gitPolicy": {
      "description": "If the project is stored in a Git repository, additional settings related to Git",
      "type": "object",
      "properties": {
        "allowedEmailRegExps": {
          "description": "A list of regular expressions describing allowable e-mail patterns for Git commits.  They are case-insensitive anchored JavaScript RegExps.  Example: \".*@example\\.com\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sampleEmail": {
          "description": "An example valid e-mail address for \"Mr. Example\" that conforms to one of the allowedEmailRegExps.  Example: \"mr-example@contoso\\.com\"",
          "type": "string"
        },
        "versionBumpCommitMessage": {
          "description": "The commit message to use when committing changes during \"rush publish\". Defaults to \"Bump versions [skip ci]\"",
          "type": "string"
        },
        "changeLogUpdateCommitMessage": {
          "description": "The commit message to use when committing change log files \"rush version\". Defaults to \"Update changelogs [skip ci]\"",
          "type": "string"
        },
        "changefilesCommitMessage": {
          "description": "The commit message to use when committing change files made by \"rush change\". Defaults to \"Rush change\"",
          "type": "string"
        },
        "tagSeparator": {
          "description": "The separator between package name and version in git tag. Defaults to \"_\"",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "variants": {
      "description": "Defines the list of installation variants for this repository. For more details about this feature, see this article: https://rushjs.io/pages/advanced/installation_variants/",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "variantName": {
            "description": "The name of the variant. Maps to common/rush/variants/{name} under the repository root.",
            "type": "string"
          },
          "description": {
            "description": "",
            "type": "string"
          }
        },
        "required": ["variantName", "description"]
      }
    },
    "repository": {
      "description": "The repository location",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The remote url of the repository. If a value is provided, \"rush change\" will use it to find the right remote to compare against."
        },
        "urls": {
          "description": "All allowed remote urls of the repository. If a value is provided, \"rush change\" will use one of these to find the right remote to compare against. Specifying multiple URLs is useful if a GitHub repository is renamed or for \"<projectName>.visualstudio.com\" vs \"dev.azure.com/<projectName>\" URLs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultBranch": {
          "description": "The default branch name. This tells \"rush change\" which remote branch to compare against. The default value is \"main\"",
          "type": "string"
        },
        "defaultRemote": {
          "description": "The default remote. This tells \"rush change\" which remote to compare against if the remote URL is not set or if a remote matching the provided remote URL is not found.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "telemetryEnabled": {
      "description": "Indicates whether telemetry data should be collected and stored in the Rush temp folder during Rush runs.",
      "type": "boolean"
    },
    "allowedProjectTags": {
      "description": "This is an optional, but recommended, list of allowed tags that can be applied to Rush projects using the \"tags\" setting in this file.  This list is useful for preventing mistakes such as misspelling, and it also provides a centralized place to document your tags.  If \"allowedProjectTags\" list is not specified, then any valid tag is allowed.  A tag name must be one or more words separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits, \".\", and \"@\" characters.",
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9.@]+([-/][a-z0-9.@]+)*$"
      }
    },
    "projects": {
      "description": "A list of projects managed by this tool.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "packageName": {
            "description": "The NPM package name of the project.",
            "type": "string"
          },
          "projectFolder": {
            "description": "The path to the project folder relative to the Rush config file.",
            "type": "string"
          },
          "reviewCategory": {
            "description": "An optional category for usage in the \"browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\" files.  Only strings from reviewCategories are allowed here.",
            "type": "string"
          },
          "cyclicDependencyProjects": {
            "description": "(Deprecated) This field was renamed to \"decoupledLocalDependencies\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "decoupledLocalDependencies": {
            "description": "A list of local projects that appear as devDependencies for this project, but cannot be locally linked because it would create a cyclic dependency; instead, the last published version will be installed in the Common folder.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "shouldPublish": {
            "description": "A flag indicating that changes to this project will be published to npm, which affects the Rush change and publish workflows.",
            "type": "boolean"
          },
          "skipRushCheck": {
            "description": "If true, then this project will be ignored by the \"rush check\" command.  The default value is false.",
            "type": "boolean"
          },
          "versionPolicyName": {
            "description": "An optional version policy associated with the project. Version policies are defined in \"version-policies.json\" file.",
            "type": "string"
          },
          "publishFolder": {
            "description": "Facilitates postprocessing of a project's files prior to publishing. If specified, the \"publishFolder\" is the relative path to a subfolder of the project folder. The \"rush publish\" command will publish the subfolder instead of the project folder. The subfolder must contain its own package.json file, which is typically a build output.",
            "type": "string"
          },
          "tags": {
            "description": "An optional set of custom tags that can be used to select this project. For example, adding \"my-custom-tag\" will allow this project to be selected by the command \"rush list --only tag:my-custom-tag\". The tag name must be one or more words separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits, \".\", and \"@\" characters.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[a-z0-9.@]+([-/][a-z0-9.@]+)*$"
            }
          },
          "subspaceName": {
            "description": "(EXPERIMENTAL) An optional entry for specifying which subspace this project belongs to if the subspaces feature is enabled.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": ["packageName", "projectFolder"]
      }
    },
    "eventHooks": {
      "description": "Hooks are customized script actions that Rush executes when specific events occur.",
      "type": "object",
      "properties": {
        "preRushInstall": {
          "description": "The list of scripts to run before the Rush installation starts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postRushInstall": {
          "description": "The list of scripts to run after the Rush installation finishes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preRushBuild": {
          "description": "The list of scripts to run before the Rush build command starts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postRushBuild": {
          "description": "The list of scripts to run after the Rush build command finishes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "preRushx": {
          "description": "The list of scripts to run before rushx starts.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postRushx": {
          "description": "The list of scripts to run after rushx finishes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": ["rushVersion", "projects"]
}
