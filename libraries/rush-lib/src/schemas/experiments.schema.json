{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Rush experiments.json config file",
  "description": "For use with the Rush tool, this file allows repo maintainers to enable and disable experimental Rush features.",

  "type": "object",
  "properties": {
    "$schema": {
      "description": "Part of the JSON Schema standard, this optional keyword declares the URL of the schema that the file conforms to. Editors may download the schema and use it to perform syntax highlighting.",
      "type": "string"
    },

    "usePnpmFrozenLockfileForRushInstall": {
      "description": "By default, 'rush install' passes --no-prefer-frozen-lockfile to 'pnpm install'. Set this option to true to pass '--frozen-lockfile' instead.",
      "type": "boolean"
    },
    "usePnpmPreferFrozenLockfileForRushUpdate": {
      "description": "By default, 'rush update' passes --no-prefer-frozen-lockfile to 'pnpm install'. Set this option to true to pass '--prefer-frozen-lockfile' instead.",
      "type": "boolean"
    },
    "usePnpmLockfileOnlyThenFrozenLockfileForRushUpdate": {
      "description": "By default, 'rush update' runs as a single operation. Set this option to true to instead update the lockfile with `--lockfile-only`, then perform a `--frozen-lockfile` install. Necessary when using the `afterAllResolved` hook in .pnpmfile.cjs.",
      "type": "boolean"
    },
    "omitImportersFromPreventManualShrinkwrapChanges": {
      "description": "If using the 'preventManualShrinkwrapChanges' option, only prevent manual changes to the total set of external dependencies referenced by the repository, not which projects reference which dependencies. This offers a balance between lockfile integrity and merge conflicts.",
      "type": "boolean"
    },
    "noChmodFieldInTarHeaderNormalization": {
      "description": "If true, the chmod field in temporary project tar headers will not be normalized. This normalization can help ensure consistent tarball integrity across platforms.",
      "type": "boolean"
    },
    "buildCacheWithAllowWarningsInSuccessfulBuild": {
      "description": "If true, build caching will respect the allowWarningsInSuccessfulBuild flag and cache builds with warnings. This will not replay warnings from the cached build.",
      "type": "boolean"
    },
    "buildSkipWithAllowWarningsInSuccessfulBuild": {
      "description": "If true, build skipping will respect the allowWarningsInSuccessfulBuild flag and skip builds with warnings. This will not replay warnings from the skipped build.",
      "type": "boolean"
    },
    "phasedCommands": {
      "description": "THIS EXPERIMENT HAS BEEN GRADUATED TO A STANDARD FEATURE. THIS PROPERTY SHOULD BE REMOVED.",
      "type": "boolean"
    },
    "cleanInstallAfterNpmrcChanges": {
      "description": "If true, perform a clean install after when running `rush install` or `rush update` if the `.npmrc` file has changed since the last install.",
      "type": "boolean"
    },
    "printEventHooksOutputToConsole": {
      "description": "If true, print the outputs of shell commands defined in event hooks to the console.",
      "type": "boolean"
    },
    "forbidPhantomResolvableNodeModulesFolders": {
      "description": "If true, Rush will not allow node_modules in the repo folder or in parent folders.",
      "type": "boolean"
    },
    "usePnpmSyncForInjectedDependencies": {
      "description": "(UNDER DEVELOPMENT) For certain installation problems involving peer dependencies, PNPM cannot correctly satisfy versioning requirements without installing duplicate copies of a package inside the node_modules folder. This poses a problem for 'workspace:*' dependencies, as they are normally installed by making a symlink to the local project source folder. PNPM's 'injected dependencies' feature provides a model for copying the local project folder into node_modules, however copying must occur AFTER the dependency project is built and BEFORE the consuming project starts to build. The 'pnpm-sync' tool manages this operation; see its documentation for details. Enable this experiment if you want 'rush' and 'rushx' commands to resync injected dependencies by invoking 'pnpm-sync' during the build.",
      "type": "boolean"
    },
    "generateProjectImpactGraphDuringRushUpdate": {
      "description": "If set to true, Rush will generate a `project-impact-graph.yaml` file in the repository root during `rush update`.",
      "type": "boolean"
    },
    "useIPCScriptsInWatchMode": {
      "description": "If true, when running in watch mode, Rush will check for phase scripts named `_phase:<name>:ipc` and run them instead of `_phase:<name>` if they exist. The created child process will be provided with an IPC channel and expected to persist across invocations.",
      "type": "boolean"
    },
    "allowCobuildWithoutCache": {
      "description": "When using cobuilds, this experiment allows uncacheable operations to benefit from cobuild orchestration without using the build cache.",
      "type": "boolean"
    },
    "rushAlerts": {
      "description": "(UNDER DEVELOPMENT) The Rush alerts feature provides a way to send announcements to engineers working in the monorepo, by printing directly in the user's shell window when they invoke Rush commands. This ensures that important notices will be seen by anyone doing active development, since people often ignore normal discussion group messages or don't know to subscribe.",
      "type": "boolean"
    }
  },
  "additionalProperties": false
}
